{"version":3,"sources":["GithubCorner.js","App.js","reportWebVitals.js","index.js"],"names":["Corner","target","rel","href","className","aria-label","width","height","viewBox","style","fill","color","position","top","border","right","aria-hidden","d","transformOrigin","App","useState","customDialog","setCustomDialog","isDialogVisible","setIsDialogVisible","example1","toggleExample1","example2","toggleExample2","example3","toggleExample3","type","onClick","cancelableOutside","title","confirmText","onConfirmClick","onCloseClick","id","cursor","navigator","clipboard","writeText","elem","document","getElementById","icon","classList","add","addEventListener","remove","textAlign","text","language","showLineNumbers","theme","github","body","onCancelClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8QA4CeA,EAxCA,WACb,OACE,mBACEC,OAAO,SACPC,IAAI,aACJC,KAAK,8CACLC,UAAU,gBACVC,aAAW,wBALb,SAME,sBACEC,MAAM,MACNC,OAAO,MACPC,QAAQ,cACRC,MAAO,CACLC,KAAM,UACNC,MAAO,OACPC,SAAU,WACVC,IAAK,EACLC,OAAQ,EACRC,MAAO,GAETC,cAAY,OAZd,UAaE,sBAAMC,EAAE,sDACR,sBACEA,EAAE,2LACFP,KAAK,eACLD,MAAO,CACLS,gBAAiB,eAEnBd,UAAU,aAEZ,sBACEa,EAAE,shBACFP,KAAK,eACLN,UAAU,oB,MCocLe,MA/df,WAAgB,IAAD,EAC6BC,qBAD7B,mBACLC,EADK,KACSC,EADT,OAEmCF,oBAAS,GAF5C,mBAELG,EAFK,KAEYC,EAFZ,OAGwBJ,oBAAS,GAHjC,mBAGLK,EAHK,KAGKC,EAHL,OAIwBN,oBAAS,GAJjC,mBAILO,EAJK,KAIKC,EAJL,OAKwBR,oBAAS,GALjC,mBAKLS,EALK,KAKKC,EALL,KAMb,OACE,sBAAK1B,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,sBAAKA,UAAU,qBAAf,UACE,2DACA,8FAGA,wBACE2B,KAAK,SACL3B,UAAU,aACV4B,QAAS,kBAAMR,GAAmB,IAHpC,4BAQAD,GACA,cAAC,IAAD,CACEU,mBAAmB,EACnB7B,UAAU,gBACV8B,MAAM,4BACNC,YAAY,UACZC,eAAgB,kBAAMZ,GAAmB,IACzCa,aAAc,kBAAMb,GAAmB,IANzC,SAOE,qGAMN,0BAASpB,UAAU,WAAnB,UACE,oCACE,8CACA,uBAAMA,UAAU,wBAAhB,UACE,qBAAKkC,GAAG,UAAR,sDAGA,mBACEA,GAAG,eACHlC,UAAU,cACVK,MAAO,CAAE8B,OAAQ,WACjBP,QAAS,WAAO,IAAD,IACJ,QAAT,EAAAQ,iBAAA,mBAAWC,iBAAX,SAAsBC,UAAU,0CAChC,IAAMC,EAAOC,SAASC,eAAe,WAC/BC,EAAOF,SAASC,eAAe,gBACrCF,EAAKI,UAAUC,IAAI,eACnBF,EAAKC,UAAUC,IAAI,eACnBL,EAAKM,iBAAiB,gBAAgB,WACpCN,EAAKI,UAAUG,OAAO,eACtBJ,EAAKC,UAAUG,OAAO,2BAMhC,oCACE,uCACA,qBAAK9C,UAAU,iBAAf,SACE,kCACE,gCACE,+BACE,sCACA,sCACA,0CACA,6CACA,8CAGJ,kCACE,+BACE,uCACA,wCACA,uBACA,8CACA,0BAEF,+BACE,wCACA,wCACA,uBACA,+CACA,0BAEF,+BACE,uCACA,wCACA,uBACA,8CACA,0BAEF,+BACE,2CACA,yCACA,uBACA,oDACA,yCAEF,+BACE,2CACA,wCACA,uBACA,oEACA,0BAEF,+BACE,yCACA,wCACA,uBACA,6EACA,0BAEF,+BACE,mDACA,yCACA,uBACA,uFACA,0CAEF,+BACE,iDACA,yCACA,uBACA,+EACA,0CAEF,+BACE,iDACA,yCACA,uBACA,wDACA,0CAEF,+BACE,8CACA,0CACA,oBAAIK,MAAO,CAAE0C,UAAW,UAAxB,SACE,yCAEF,6DACA,0BAEF,+BACE,4CACA,wCACA,uBACA,sDACA,6CAEF,+BACE,+CACA,0CACA,uBACA,gEACA,0BAEF,+BACE,gDACA,yCACA,uBACA,+DACA,0CAEF,+BACE,6CACA,wCACA,uBACA,sDACA,yCAEF,+BACE,gDACA,0CACA,uBACA,gEACA,0BAEF,+BACE,iDACA,yCACA,uBACA,+DACA,qDAMV,oCACE,uCACA,uCAGI1B,EACA,mBACErB,UAAU,sBACV4B,QAAS,kBAAMN,GAAe,MAEhC,mBACEtB,UAAU,qBACV4B,QAAS,kBAAMN,GAAe,SAKlCD,GACA,qCACE,cAAC,IAAD,CACE2B,KAAI,gqCA+BJC,SAAU,aACVC,iBAAiB,EACjBC,MAAOC,MACT,iCACE,wBACEzB,KAAK,SACL3B,UAAU,aACV4B,QAAS,WACPV,EAAgB,CACdf,OAAQ,IACR2B,MAAO,QACPG,aAAc,kBAAMf,QAP1B,iCAgBR,oCACE,8CAGIK,EACA,mBACEvB,UAAU,sBACV4B,QAAS,kBAAMJ,GAAe,MAEhC,mBACExB,UAAU,qBACV4B,QAAS,kBAAMJ,GAAe,SAKlCD,GACA,qCACE,cAAC,IAAD,CACEyB,KAAI,06CAkCJC,SAAU,aACVC,iBAAiB,EACjBC,MAAOC,MACT,iCACE,wBACEzB,KAAK,SACL3B,UAAU,aACV4B,QAAS,WACPV,EAAgB,CACdhB,MAAO,IACP4B,MAAO,eACPuB,KAAM,0GACNC,cAAe,kBAAMpC,KACrBc,eAAgB,kBAAMd,KACtBe,aAAc,kBAAMf,QAV1B,iCAmBR,oCACE,mDAGIO,EACA,mBACEzB,UAAU,sBACV4B,QAAS,kBAAMF,GAAe,MAEhC,mBACE1B,UAAU,qBACV4B,QAAS,kBAAMF,GAAe,SAKlCD,GACA,qCACE,cAAC,IAAD,CACAzB,UAAU,KACVgD,KAAI,m1EA+DJC,SAAU,aACVC,iBAAiB,EACjBC,MAAOC,MACP,iCACE,wBACEzB,KAAK,SACL3B,UAAU,aACV4B,QAAS,WACPV,EAAgB,CACdhB,MAAO,IACP4B,MAAO,oBACP9B,UAAW,mBACXqD,KAAM,+DACNC,cAAe,kBAAMpC,KACrBc,eAAgB,kBAAMd,KACtBe,aAAc,kBAAMf,QAX1B,8BAmBN,oBACErB,OAAO,SACPC,IAAI,aACJE,UAAU,sBACVD,KAAK,uDAJP,mDAME,mBAAGC,UAAU,0CAGjB,oCACE,yCACA,2CAGJ,yBAAQA,UAAU,aAAlB,4CACuB,mBAAGF,IAAI,aAAaC,KAAK,iCAAiCF,OAAO,SAAjE,6BAGrBoB,GACA,cAAC,IAAD,2BAAYA,GAAZ,aACE,+BAEIA,EAAaoC,MACb,yBAKR,cAAC,EAAD,QCxdSE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,gCAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAASC,eAAe,SAM1Bc,M","file":"static/js/main.d65632f8.chunk.js","sourcesContent":["\nimport './GithubCorner.scss';\n\n\nconst Corner = () => {\n  return (\n    <a\n      target='_blank'\n      rel=\"noreferrer\"\n      href=\"https://github.com/DenkSchuldt/react-dialog\"\n      className=\"github-corner\"\n      aria-label=\"View source on GitHub\">\n      <svg\n        width=\"100\"\n        height=\"100\"\n        viewBox=\"0 0 250 250\"\n        style={{\n          fill: '#151513',\n          color: '#fff',\n          position: 'absolute',\n          top: 0,\n          border: 0,\n          right: 0\n        }}\n        aria-hidden=\"true\">\n        <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\n        <path\n          d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n          fill=\"currentColor\"\n          style={{\n            transformOrigin: '130px 106px'\n          }}\n          className=\"octo-arm\">\n        </path>\n        <path\n          d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n          fill=\"currentColor\"\n          className=\"octo-body\">\n        </path>\n      </svg>\n    </a>\n  )\n}\n\nexport default Corner;\n","\nimport { useState } from 'react';\nimport Dialog from '@denkschuldt/react-dialog';\nimport { CodeBlock, github } from \"react-code-blocks\";\n\nimport GithubCorner from './GithubCorner';\n\nimport './App.scss';\n\n\nfunction App() {\n  const [ customDialog, setCustomDialog ] = useState();\n  const [ isDialogVisible, setIsDialogVisible ] = useState(true);\n  const [ example1, toggleExample1 ] = useState(true);\n  const [ example2, toggleExample2 ] = useState(true);\n  const [ example3, toggleExample3 ] = useState(true);\n  return (\n    <div className=\"app\">\n      <header className='app-header'>\n        <div className='app-header-content'>\n          <h2>@denkschuldt/react-dialog</h2>\n          <p>\n            A simple to use and customizable react dialog implementation.\n          </p>\n          <button\n            type='button'\n            className='app-button'\n            onClick={() => setIsDialogVisible(true)}>\n            Open dialog\n          </button>\n        </div>\n        {\n          isDialogVisible &&\n          <Dialog\n            cancelableOutside={false}\n            className='dnk-my-dialog'\n            title='@denkschuldt/react-dialog'\n            confirmText='Woohoo!'\n            onConfirmClick={() => setIsDialogVisible(false)}\n            onCloseClick={() => setIsDialogVisible(false)}>\n            <div>\n              A simple to use and customizable react dialog implementation.\n            </div>\n          </Dialog>\n        }\n      </header>\n      <section className='app-body'>\n        <article>\n          <h1>Installation</h1>\n          <code className='app-installation-code'>\n            <div id='dnk-npm'>\n              $ npm i @denkschuldt/react-dialog --save\n            </div>\n            <i\n              id='dnk-npm-icon'\n              className=\"fas fa-copy\"\n              style={{ cursor: 'pointer' }}\n              onClick={() => {\n                navigator?.clipboard?.writeText('npm i @denkschuldt/react-dialog --save');\n                const elem = document.getElementById('dnk-npm');\n                const icon = document.getElementById('dnk-npm-icon');\n                elem.classList.add('dnk-animate');\n                icon.classList.add('dnk-animate');\n                elem.addEventListener('animationend', () => {\n                  elem.classList.remove('dnk-animate');\n                  icon.classList.remove('dnk-animate');\n                });\n              }}>\n            </i>\n          </code>\n        </article>\n        <article>\n          <h1>Props</h1>\n          <div className='app-body-table'>\n            <table>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Type</th>\n                  <th>Required</th>\n                  <th>Description</th>\n                  <th>Default</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>width</td>\n                  <td>Number</td>\n                  <td></td>\n                  <td>Dialog width</td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td>height</td>\n                  <td>Number</td>\n                  <td></td>\n                  <td>Dialog height</td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td>title</td>\n                  <td>String</td>\n                  <td></td>\n                  <td>Dialog title</td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td>draggable</td>\n                  <td>Boolean</td>\n                  <td></td>\n                  <td>Allows dialog drag</td>\n                  <td>true</td>\n                </tr>\n                <tr>\n                  <td>className</td>\n                  <td>String</td>\n                  <td></td>\n                  <td>Component class to override styles</td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td>slideIn</td>\n                  <td>String</td>\n                  <td></td>\n                  <td>Initial animation: top, bottom, left, right</td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td>cancelableOutside</td>\n                  <td>Boolean</td>\n                  <td></td>\n                  <td>Whether the dialogs closes by clicking outside or not</td>\n                  <td>false</td>\n                </tr>\n                <tr>\n                  <td>closeOnEscPress</td>\n                  <td>Boolean</td>\n                  <td></td>\n                  <td>Whether the dialogs closes by pressing escape</td>\n                  <td>false</td>\n                </tr>\n                <tr>\n                  <td>hideCloseButton</td>\n                  <td>Boolean</td>\n                  <td></td>\n                  <td>Hides the close button</td>\n                  <td>false</td>\n                </tr>\n                <tr>\n                  <td>onCloseClick</td>\n                  <td>function</td>\n                  <td style={{ textAlign: 'center' }}>\n                    <p>&#9989;</p>\n                  </td>\n                  <td>Close button click function</td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td>cancelText</td>\n                  <td>String</td>\n                  <td></td>\n                  <td>Negative button text</td>\n                  <td>'CANCEL'</td>\n                </tr>\n                <tr>\n                  <td>onCancelClick</td>\n                  <td>function</td>\n                  <td></td>\n                  <td>Negative button click function</td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td>cancelDisabled</td>\n                  <td>Boolean</td>\n                  <td></td>\n                  <td>Negative button disabled prop</td>\n                  <td>false</td>\n                </tr>\n                <tr>\n                  <td>confirmText</td>\n                  <td>String</td>\n                  <td></td>\n                  <td>Positive button text</td>\n                  <td>'OK'</td>\n                </tr>\n                <tr>\n                  <td>onConfirmClick</td>\n                  <td>function</td>\n                  <td></td>\n                  <td>Positive button click function</td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td>confirmDisabled</td>\n                  <td>Boolean</td>\n                  <td></td>\n                  <td>Positive button disabled prop</td>\n                  <td>false</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </article>\n        <article>\n          <h1>Usage</h1>\n          <h2>\n            Basic\n            {\n              example1 ?\n              <i\n                className=\"fas fa-minus-circle\"\n                onClick={() => toggleExample1(false)}>\n              </i> :\n              <i\n                className=\"fas fa-plus-circle\"\n                onClick={() => toggleExample1(true)}>\n              </i>\n            }\n          </h2>\n          {\n            example1 &&\n            <>\n              <CodeBlock\n                text={`\n                  import ReactDOM from 'react-dom';\n                  import React, { useState } from 'react';\n                  import Dialog from '@denkschuldt/react-dialog';\n\n                  const App = () => {\n                    const [ isVisible, setIsVisible ] = useState(false);\n                    return (\n                      <div>\n                        <button\n                          type='button'\n                          onClick={() => setIsVisible(true)}>\n                          Show dialog\n                        </button>\n                        {\n                          isVisible &&\n                          <Dialog\n                            height={150}\n                            title='Basic'\n                            onCloseClick={() => setIsVisible(false)}>\n                            <span>\n                              This is the body.\n                            </span>\n                          </Dialog>\n                        }\n                      </div>\n                    );\n                  }\n\n                  ReactDOM.render(<App/>, document.getElementById('root'));\n                `}\n                language={'javascript'}\n                showLineNumbers={false}\n                theme={github}/>\n              <footer>\n                <button\n                  type='button'\n                  className='app-button'\n                  onClick={() => {\n                    setCustomDialog({\n                      height: 150,\n                      title: 'Basic',\n                      onCloseClick: () => setCustomDialog()\n                    })\n                  }}>\n                  Show dialog\n                </button>\n              </footer>\n            </>\n          }\n        </article>\n        <article>\n          <h2>\n            With buttons\n            {\n              example2 ?\n              <i\n                className=\"fas fa-minus-circle\"\n                onClick={() => toggleExample2(false)}>\n              </i> :\n              <i\n                className=\"fas fa-plus-circle\"\n                onClick={() => toggleExample2(true)}>\n              </i>\n            }\n          </h2>\n          {\n            example2 &&\n            <>\n              <CodeBlock\n                text={`\n                  import ReactDOM from 'react-dom';\n                  import React, { useState } from 'react';\n                  import Dialog from '@denkschuldt/react-dialog';\n\n                  const App = () => {\n                    const [ isVisible, setIsVisible ] = useState(false);\n                    return (\n                      <div>\n                        <button\n                          type='button'\n                          onClick={() => setIsVisible(true)}>\n                          Show dialog\n                        </button>\n                        {\n                          isVisible &&\n                          <Dialog\n                            width={400}\n                            title='With buttons'\n                            onCancelClick={() => setIsVisible(false)}\n                            onConfirmClick={() => setIsVisible(false)}\n                            onCloseClick={() => setIsVisible(false)}>\n                            <span>\n                              This is the body. Now the dialog includes two buttons,\n                              one for cancelations, and one for confirmations.\n                            </span>\n                          </Dialog>\n                        }\n                      </div>\n                    );\n                  }\n\n                  ReactDOM.render(<App/>, document.getElementById('root'));\n                `}\n                language={'javascript'}\n                showLineNumbers={false}\n                theme={github}/>\n              <footer>\n                <button\n                  type='button'\n                  className='app-button'\n                  onClick={() => {\n                    setCustomDialog({\n                      width: 400,\n                      title: 'With buttons',\n                      body: 'This is the body. Now the dialog includes two buttons, one for cancelations, and one for confirmations.',\n                      onCancelClick: () => setCustomDialog(),\n                      onConfirmClick: () => setCustomDialog(),\n                      onCloseClick: () => setCustomDialog()\n                    })\n                  }}>\n                  Show dialog\n                </button>\n              </footer>\n            </>\n          }\n        </article>\n        <article>\n          <h2>\n            Overriding styles\n            {\n              example3 ?\n              <i\n                className=\"fas fa-minus-circle\"\n                onClick={() => toggleExample3(false)}>\n              </i> :\n              <i\n                className=\"fas fa-plus-circle\"\n                onClick={() => toggleExample3(true)}>\n              </i>\n            }\n          </h2>\n          {\n            example3 &&\n            <>\n              <CodeBlock\n              className='hi'\n              text={`\n                import ReactDOM from 'react-dom';\n                import React, { useState } from 'react';\n                import Dialog from '@denkschuldt/react-dialog';\n\n                const App = () => {\n                  const [ isVisible, setIsVisible ] = useState(false);\n                  return (\n                    <div>\n                      <button\n                        type='button'\n                        onClick={() => setIsVisible(true)}>\n                        Show dialog\n                      </button>\n                      {\n                        isVisible &&\n                        <Dialog\n                          width={320}\n                          title='Overriding styles'\n                          className='my-custom-styles'\n                          onCancelClick={() => setIsVisible(false)}\n                          onConfirmClick={() => {...}}\n                          onCloseClick={() => setIsVisible(false)}>\n                          <span>\n                            You can change the styles by overriding the dialog's classes\n                          </span>\n                        </Dialog>\n                      }\n                    </div>\n                  );\n                }\n\n                ReactDOM.render(<App/>, document.getElementById('root'));\n\n                /*\n                  styles.scss\n                  .my-custom-styles {\n                    .dnk-dialog-content {\n                      border-radius: 0;\n                      background-color: #fff;\n                      .dnk-dialog-close {\n                        top: 0;\n                        right: 0;\n                        border-radius: 0;\n                        box-shadow: none;\n                        background-color: transparent;\n                        &:hover {\n                          box-shadow: none;\n                        }\n                      }\n                      .dnk-dialog-body {\n                        .dnk-dialog-body-buttons {\n                          justify-content: center;\n                          button {\n                            width: 100%;\n                            border-radius: 0;\n                          }\n                        }\n                      }\n                    }\n                  }\n                */\n              `}\n              language={'javascript'}\n              showLineNumbers={false}\n              theme={github}/>\n              <footer>\n                <button\n                  type='button'\n                  className='app-button'\n                  onClick={() => {\n                    setCustomDialog({\n                      width: 320,\n                      title: 'Overriding styles',\n                      className: 'my-custom-styles',\n                      body: \"You can change the styles by overriding the dialog's classes\",\n                      onCancelClick: () => setCustomDialog(),\n                      onConfirmClick: () => setCustomDialog(),\n                      onCloseClick: () => setCustomDialog()\n                    })\n                  }}>\n                  Show dialog\n                </button>\n              </footer>\n            </>\n          }\n          <a\n            target='_blank'\n            rel=\"noreferrer\"\n            className='dnk-playground-link'\n            href='https://denkschuldt.github.io/react-dialog/storybook'>\n            Visit the playground for more examples\n            <i className=\"fas fa-external-link-square-alt\"></i>\n          </a>\n        </article>\n        <article>\n          <h1>License</h1>\n          <h2>MIT</h2>\n        </article>\n      </section>\n      <footer className='app-footer'>\n        Developed with ❤️ by <a rel=\"noreferrer\" href='https://github.com/DenkSchuldt' target='_blank'>@DenkSchuldt</a>\n      </footer>\n      {\n        customDialog &&\n        <Dialog {...customDialog}>\n          <span>\n            {\n              customDialog.body ||\n              'This is the body.'\n            }\n          </span>\n        </Dialog>\n      }\n      <GithubCorner/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}